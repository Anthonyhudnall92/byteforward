name: 🚀 Deploy ByteForward Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CLOUDFLARE_PROJECT_NAME: 'byteforward'

jobs:
  # Security Scanning Job
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Code Quality Job
  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npx prettier --check "assets/**/*.{js,css}"

      - name: 🧪 Run tests
        run: npm run test

  # Build Job
  build:
    name: 🏗️ Build Website
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build website
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: 📊 Upload build size report
        run: |
          echo "## 📊 Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -type f -name "*.html" -o -name "*.js" -o -name "*.css" | \
          while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Deploy to GitHub Pages
  deploy-github-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📁 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Deploy to Cloudflare Pages
  deploy-cloudflare:
    name: ☁️ Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: cloudflare-pages
      url: https://${{ env.CLOUDFLARE_PROJECT_NAME }}.pages.dev
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📁 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: ☁️ Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages publish dist --project-name=${{ env.CLOUDFLARE_PROJECT_NAME }}

      - name: 🔄 Purge Cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

  # Lighthouse Performance Audit
  lighthouse:
    name: 🔍 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [deploy-github-pages]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.deploy-github-pages.outputs.page_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security Headers Check
  security-headers:
    name: 🛡️ Security Headers Check
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🛡️ Check Security Headers
        run: |
          echo "## 🛡️ Security Headers Report" >> $GITHUB_STEP_SUMMARY
          
          SITE_URL="https://${{ env.CLOUDFLARE_PROJECT_NAME }}.pages.dev"
          
          # Check various security headers
          HEADERS=$(curl -s -I "$SITE_URL")
          
          echo "### Response Headers:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$HEADERS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Check for specific security headers
          echo "### Security Headers Status:" >> $GITHUB_STEP_SUMMARY
          echo "| Header | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          check_header() {
            local header_name="$1"
            if echo "$HEADERS" | grep -i "$header_name" > /dev/null; then
              echo "| $header_name | ✅ Present |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $header_name | ❌ Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          }
          
          check_header "Content-Security-Policy"
          check_header "X-Frame-Options"
          check_header "X-Content-Type-Options"
          check_header "Strict-Transport-Security"
          check_header "Referrer-Policy"
          check_header "Permissions-Policy"

  # Notify on Success
  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-github-pages, deploy-cloudflare, lighthouse, security-headers]
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📢 Create success summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Live Sites:" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Pages**: ${{ needs.deploy-github-pages.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloudflare Pages**: https://${{ env.CLOUDFLARE_PROJECT_NAME }}.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "- Build Process" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse Audit" >> $GITHUB_STEP_SUMMARY
          echo "- Security Headers Check" >> $GITHUB_STEP_SUMMARY

  # Cleanup on Failure
  cleanup:
    name: 🧹 Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, build, deploy-github-pages, deploy-cloudflare]
    if: failure()
    steps:
      - name: 🧹 Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              console.log(`Deleting artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

      - name: 📢 Create failure summary
        run: |
          echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Common Solutions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check for syntax errors in HTML, CSS, or JavaScript" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify all dependencies are properly installed" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure environment variables are correctly configured" >> $GITHUB_STEP_SUMMARY
          echo "4. Review security scan results for vulnerabilities" >> $GITHUB_STEP_SUMMARY
